// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: job.sql

package scheduler

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createJob = `-- name: CreateJob :one
INSERT INTO jobs (
  id, email_id, job_type, payload, recurring, frequency, next_run, timeout_after, job_status   
) VALUES (
  $1, $2, $3, $4, $5, $6, $7, $8, $9
)
RETURNING id, email_id, job_type, payload, recurring, frequency, next_run, timeout_after, job_status
`

type CreateJobParams struct {
	ID           pgtype.UUID
	EmailID      string
	JobType      Jobtype
	Payload      []byte
	Recurring    bool
	Frequency    pgtype.Int4
	NextRun      pgtype.Timestamp
	TimeoutAfter int32
	JobStatus    Jobstatus
}

func (q *Queries) CreateJob(ctx context.Context, arg CreateJobParams) (Job, error) {
	row := q.db.QueryRow(ctx, createJob,
		arg.ID,
		arg.EmailID,
		arg.JobType,
		arg.Payload,
		arg.Recurring,
		arg.Frequency,
		arg.NextRun,
		arg.TimeoutAfter,
		arg.JobStatus,
	)
	var i Job
	err := row.Scan(
		&i.ID,
		&i.EmailID,
		&i.JobType,
		&i.Payload,
		&i.Recurring,
		&i.Frequency,
		&i.NextRun,
		&i.TimeoutAfter,
		&i.JobStatus,
	)
	return i, err
}

const getJobById = `-- name: GetJobById :one
SELECT id, email_id, job_type, payload, recurring, frequency, next_run, timeout_after, job_status FROM jobs
WHERE id = $1
`

func (q *Queries) GetJobById(ctx context.Context, id pgtype.UUID) (Job, error) {
	row := q.db.QueryRow(ctx, getJobById, id)
	var i Job
	err := row.Scan(
		&i.ID,
		&i.EmailID,
		&i.JobType,
		&i.Payload,
		&i.Recurring,
		&i.Frequency,
		&i.NextRun,
		&i.TimeoutAfter,
		&i.JobStatus,
	)
	return i, err
}
