// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0

package scheduler

import (
	"database/sql/driver"
	"fmt"

	"github.com/jackc/pgx/v5/pgtype"
)

type Jobstatus string

const (
	JobstatusScheduled Jobstatus = "Scheduled"
	JobstatusFinished  Jobstatus = "Finished"
)

func (e *Jobstatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = Jobstatus(s)
	case string:
		*e = Jobstatus(s)
	default:
		return fmt.Errorf("unsupported scan type for Jobstatus: %T", src)
	}
	return nil
}

type NullJobstatus struct {
	Jobstatus Jobstatus
	Valid     bool // Valid is true if Jobstatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullJobstatus) Scan(value interface{}) error {
	if value == nil {
		ns.Jobstatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.Jobstatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullJobstatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.Jobstatus), nil
}

type Jobtype string

const (
	JobtypeSimple            Jobtype = "Simple"
	JobtypeGenerateFibonacci Jobtype = "GenerateFibonacci"
)

func (e *Jobtype) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = Jobtype(s)
	case string:
		*e = Jobtype(s)
	default:
		return fmt.Errorf("unsupported scan type for Jobtype: %T", src)
	}
	return nil
}

type NullJobtype struct {
	Jobtype Jobtype
	Valid   bool // Valid is true if Jobtype is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullJobtype) Scan(value interface{}) error {
	if value == nil {
		ns.Jobtype, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.Jobtype.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullJobtype) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.Jobtype), nil
}

type Job struct {
	ID           pgtype.UUID
	EmailID      string
	JobType      Jobtype
	Payload      []byte
	Recurring    bool
	Frequency    pgtype.Int4
	NextRun      pgtype.Timestamp
	TimeoutAfter int32
	JobStatus    Jobstatus
}
