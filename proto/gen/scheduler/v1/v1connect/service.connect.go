// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: scheduler/v1/service.proto

package v1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/Invictus9999/go-job-scheduler/proto/gen/scheduler/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion0_1_0

const (
	// SchedulerServiceName is the fully-qualified name of the SchedulerService service.
	SchedulerServiceName = "scheduler.v1.SchedulerService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// SchedulerServiceScheduleProcedure is the fully-qualified name of the SchedulerService's Schedule
	// RPC.
	SchedulerServiceScheduleProcedure = "/scheduler.v1.SchedulerService/Schedule"
	// SchedulerServiceStatusProcedure is the fully-qualified name of the SchedulerService's Status RPC.
	SchedulerServiceStatusProcedure = "/scheduler.v1.SchedulerService/Status"
)

// SchedulerServiceClient is a client for the scheduler.v1.SchedulerService service.
type SchedulerServiceClient interface {
	Schedule(context.Context, *connect.Request[v1.ScheduleRequest]) (*connect.Response[v1.ScheduleResponse], error)
	Status(context.Context, *connect.Request[v1.StatusRequest]) (*connect.Response[v1.StatusResponse], error)
}

// NewSchedulerServiceClient constructs a client for the scheduler.v1.SchedulerService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewSchedulerServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) SchedulerServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &schedulerServiceClient{
		schedule: connect.NewClient[v1.ScheduleRequest, v1.ScheduleResponse](
			httpClient,
			baseURL+SchedulerServiceScheduleProcedure,
			opts...,
		),
		status: connect.NewClient[v1.StatusRequest, v1.StatusResponse](
			httpClient,
			baseURL+SchedulerServiceStatusProcedure,
			opts...,
		),
	}
}

// schedulerServiceClient implements SchedulerServiceClient.
type schedulerServiceClient struct {
	schedule *connect.Client[v1.ScheduleRequest, v1.ScheduleResponse]
	status   *connect.Client[v1.StatusRequest, v1.StatusResponse]
}

// Schedule calls scheduler.v1.SchedulerService.Schedule.
func (c *schedulerServiceClient) Schedule(ctx context.Context, req *connect.Request[v1.ScheduleRequest]) (*connect.Response[v1.ScheduleResponse], error) {
	return c.schedule.CallUnary(ctx, req)
}

// Status calls scheduler.v1.SchedulerService.Status.
func (c *schedulerServiceClient) Status(ctx context.Context, req *connect.Request[v1.StatusRequest]) (*connect.Response[v1.StatusResponse], error) {
	return c.status.CallUnary(ctx, req)
}

// SchedulerServiceHandler is an implementation of the scheduler.v1.SchedulerService service.
type SchedulerServiceHandler interface {
	Schedule(context.Context, *connect.Request[v1.ScheduleRequest]) (*connect.Response[v1.ScheduleResponse], error)
	Status(context.Context, *connect.Request[v1.StatusRequest]) (*connect.Response[v1.StatusResponse], error)
}

// NewSchedulerServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewSchedulerServiceHandler(svc SchedulerServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	schedulerServiceScheduleHandler := connect.NewUnaryHandler(
		SchedulerServiceScheduleProcedure,
		svc.Schedule,
		opts...,
	)
	schedulerServiceStatusHandler := connect.NewUnaryHandler(
		SchedulerServiceStatusProcedure,
		svc.Status,
		opts...,
	)
	return "/scheduler.v1.SchedulerService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case SchedulerServiceScheduleProcedure:
			schedulerServiceScheduleHandler.ServeHTTP(w, r)
		case SchedulerServiceStatusProcedure:
			schedulerServiceStatusHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedSchedulerServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedSchedulerServiceHandler struct{}

func (UnimplementedSchedulerServiceHandler) Schedule(context.Context, *connect.Request[v1.ScheduleRequest]) (*connect.Response[v1.ScheduleResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("scheduler.v1.SchedulerService.Schedule is not implemented"))
}

func (UnimplementedSchedulerServiceHandler) Status(context.Context, *connect.Request[v1.StatusRequest]) (*connect.Response[v1.StatusResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("scheduler.v1.SchedulerService.Status is not implemented"))
}
